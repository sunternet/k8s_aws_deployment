AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VpcCIDR:
    Description: Please enter the CIDR for this VPC
    Type: String
    Default: 172.16.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the CIDR for the public subnet in the first Availability Zone
    Type: String
    Default: 172.16.1.0/24

  # PublicSubnet2CIDR:
  #   Description: Please enter the CIDR for the public subnet in the second Availability Zone
  #   Type: String
  #   Default: 172.16.2.0/24

  KeyName:
    Description: Name of an existing EC2 key pair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 key pair

  # MasterGroupSize:
  #   Default: '1'
  #   Description: The initial nuber of Master instances
  #   Type: Number

  # NodeGroupSize:
  #   Default: '1'
  #   Description: The initial nuber of Node instances
  #   Type: Number

Mappings:
  AWSRegion2AMI:
    ap-southeast-1:
      # Ubuntu 16.04
      HVM64: ami-0ee0b284267ea6cde
      # Ubuntu 18.04
      # HVM64: ami-061eb2b23f9f8839c

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  # PublicSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [1, !GetAZs ""]
  #     CidrBlock: !Ref PublicSubnet2CIDR
  #     MapPublicIpOnLaunch: true
  #     Tags:
  #       -
  #         Key: Name
  #         Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} Public Route Table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # PublicSubnet2RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnet2 

  AllowAllSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "K8s Allow All"
      SecurityGroupIngress:
        -
          IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: "0.0.0.0/0"
      VpcId:
        !Ref VPC
      Tags:
        -
          Key: Name
          Value: !Ref AWS::StackName
  
  # SQS:  
  #   Type: AWS::SQS::Queue
  #   Properties: 
  #     FifoQueue: TRUE
  #     QueueName: k8s.fifo
  #     Tags: 
  #       -
  #         Key: Name
  #         Value: !Sub ${AWS::StackName} FIFO Q
  #     VisibilityTimeout: 0

  # SQSFullRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ec2.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     ManagedPolicyArns: 
  #       - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  #     RoleName: !Sub ${AWS::StackName}_SQSFull
  #     Tags:
  #       -
  #         Key: Name
  #         Value: !Sub ${AWS::StackName} SQSFull

  # SQSReadRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ec2.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     ManagedPolicyArns: 
  #       - arn:aws:iam::aws:policy/AmazonSQSReadOnlyAccess
  #     RoleName: !Sub ${AWS::StackName}_SQSRead
  #     Tags:
  #       -
  #         Key: Name
  #         Value: !Sub ${AWS::StackName} SQSRead

  # SQSFullInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     InstanceProfileName: !Sub ${AWS::StackName}_SQSFullInstanceProfile
  #     Path: "/"
  #     Roles:
  #     - Ref: SQSFullRole

  # SQSReadInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     InstanceProfileName: !Sub ${AWS::StackName}_SQSReadInstanceProfile
  #     Path: "/"
  #     Roles:
  #     - Ref: SQSReadRole

  K8sMasterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId:
          Fn::FindInMap:
            - AWSRegion2AMI
            - !Ref AWS::Region
            - HVM64
        # IamInstanceProfile:
        #   Arn:
        #     Fn::GetAtt:
        #     - SQSFullInstanceProfile
        #     - Arn
        InstanceType: t2.micro
        #SecurityGroupIds:
        #- Ref: AllowAllSecurityGroup
        KeyName:
          Ref: KeyName
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash -xe
  
  K8sNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId:
          Fn::FindInMap:
            - AWSRegion2AMI
            - !Ref AWS::Region
            - HVM64
        # IamInstanceProfile:
        #   Arn:
        #     Fn::GetAtt:
        #     - SQSFullInstanceProfile
        #     - Arn
        InstanceType: t2.micro
        #SecurityGroupIds:
        #- Ref: AllowAllSecurityGroup
        KeyName:
          Ref: KeyName
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash -xe

  K8sMasterInstance: 
    Type: AWS::EC2::Instance
    Properties: 
      LaunchTemplate:
        LaunchTemplateId: !Ref K8sMasterLaunchTemplate
        #LaunchTemplateName: String
        Version: 1
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: 
            Ref: "PublicSubnet1"
          GroupSet: 
            - !Ref AllowAllSecurityGroup
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} Master

  K8sNodeInstance1: 
    Type: AWS::EC2::Instance
    #DependsOn: K8sMasterInstance
    Properties: 
      LaunchTemplate:
        LaunchTemplateId: !Ref K8sNodeLaunchTemplate
        #LaunchTemplateName: String
        Version: 1
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: 
            Ref: "PublicSubnet1"
          GroupSet: 
            - !Ref AllowAllSecurityGroup
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} Node1

  K8sNodeInstance2: 
    Type: AWS::EC2::Instance
    #DependsOn: K8sMasterInstance
    Properties: 
      LaunchTemplate:
        LaunchTemplateId: !Ref K8sNodeLaunchTemplate
        #LaunchTemplateName: String
        Version: 1
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: 
            Ref: "PublicSubnet1"
          GroupSet: 
            - !Ref AllowAllSecurityGroup
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} Node2

  K8sNodeInstance3: 
    Type: AWS::EC2::Instance
    #DependsOn: K8sMasterInstance
    Properties: 
      LaunchTemplate:
        LaunchTemplateId: !Ref K8sNodeLaunchTemplate
        #LaunchTemplateName: String
        Version: 1
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: 
            Ref: "PublicSubnet1"
          GroupSet: 
            - !Ref AllowAllSecurityGroup
      Tags:
        -
          Key: Name
          Value: !Sub ${AWS::StackName} Node3

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name:
        !Sub "${AWS::StackName}-VPC"

  PublicSubnets:
    Description: A list of the public subnets
    # Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Value: !Ref PublicSubnet1

  PublicSubnet1:
    Description: Public subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name:
        !Sub "${AWS::StackName}-PublicSubnet1"

  # PublicSubnet2:
  #   Description: Public subnet 2 ID
  #   Value: !Ref PublicSubnet2
  #   Export:
  #     Name:
  #       !Sub "${AWS::StackName}-PublicSubnet2"